=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "B_1"       (component KBI)
   - B_1_GetVal -Returns the value of pins
   - B_1_SetEdge -Sets the sensitive edge. If all selected pins don't have the same edge setting possibility, the method allows 
                to set only those edges that are common (possible to set for all selected pins).

Module "M_1"       (component PWM)
   - M_1_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - M_1_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - M_1_SetRatio8 -This method sets a new duty-cycle ratio. Ratio is expressed as an 8-bit unsigned integer number. 0 - FF 
                value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.   Note: Calculated duty depends on the timer capabilities and on the 
                selected period.
   - M_1_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - FFFF 
                value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.   Note: Calculated duty depends on the timer possibilities and on 
                the selected period.
   - M_1_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 16-bit 
                unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - M_1_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 16-bit 
                unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "M_2"       (component PWM)
   - M_2_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - M_2_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - M_2_SetRatio8 -This method sets a new duty-cycle ratio. Ratio is expressed as an 8-bit unsigned integer number. 0 - FF 
                value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.   Note: Calculated duty depends on the timer capabilities and on the 
                selected period.
   - M_2_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - FFFF 
                value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.   Note: Calculated duty depends on the timer possibilities and on 
                the selected period.
   - M_2_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 16-bit 
                unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - M_2_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 16-bit 
                unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "LED_OUT"   (component PPG)
   - LED_OUT_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - LED_OUT_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - LED_OUT_SetRatio8 -This method sets a new duty-cycle ratio. The ratio is expressed as an 8-bit unsigned integer number. 
                Value 0 - 255 is proportional to ratio 0 - 100%.   Note: Calculated duty depends on the timer possibilities and 
                on the selected period.  The method is available only if method <SetPeriodMode> is not selected.
   - LED_OUT_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. Value 
                0 - 65535 value is proportional to ratio 0 - 100%.   Note: Calculated duty depends on the timer possibilities 
                and on the selected period.  The method is available only if method <SetPeriodMode> is not selected.
   - LED_OUT_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number.  The method is available only if method <SetPeriodMode> is not selected.
   - LED_OUT_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number.  The method is available only if method <SetPeriodMode> is not selected.

Module "Serial_1"  (component AsynchroSerial)
   - Serial_1_Enable -Enables the component - it starts the send and receive functions. Events may be generated 
                ("DisableEvent"/"EnableEvent").
   - Serial_1_Disable -Disables the component - it stops the send and receive functions. No events will be generated.
   - Serial_1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - Serial_1_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - Serial_1_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - Serial_1_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "Serial_2"  (component AsynchroSerial)
   - Serial_2_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - Serial_2_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - Serial_2_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - Serial_2_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "LED_1"     (component BitIO)
   - LED_1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - LED_1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LED_1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - LED_1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.
   - LED_1_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "ADC"       (component ADC)
   - ADC_Enable -Enables A/D converter component. <Events> may be generated (<DisableEvent>/<EnableEvent>). If possible, this 
                method switches on A/D converter device, voltage reference, etc.
   - ADC_Disable -Disables A/D converter component. No <events> will be generated. If possible, this method switches off A/D 
                converter device, voltage reference, etc.
   - ADC_EnableEvent -Enables the <events>.
   - ADC_DisableEvent -Disables the <events>.
   - ADC_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - ADC_MeasureChan -This method performs measurement on one channel. (Note: If the <number of conversions> is more than one 
                the conversion of the A/D channel is performed specified number of times.)
   - ADC_GetValue -Returns the last measured values for all channels. Format and width of the value is a native format of the 
                A/D converter.
   - ADC_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this method 
                returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is less than 
                16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - ADC_GetChanValue16 -This method returns the last measured value of the required channel. Compared with <GetChanValue> 
                method this method returns more accurate result if the <number of conversions> is greater than 1 and <AD 
                resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.

Module "Cpu"       (component MC9S08QE128_80)
   - Cpu_EnableInt -Enables maskable interrupts
   - Cpu_DisableInt -Disables maskable interrupts

===================================================================================
