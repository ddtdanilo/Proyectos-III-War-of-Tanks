=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "M_1"       (component PWM)
   - M_1_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - M_1_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - M_1_SetRatio8 -This method sets a new duty-cycle ratio. Ratio is expressed as an 8-bit unsigned integer number. 0 - FF 
                value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.   Note: Calculated duty depends on the timer capabilities and on the 
                selected period.
   - M_1_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - FFFF 
                value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.   Note: Calculated duty depends on the timer possibilities and on 
                the selected period.
   - M_1_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 16-bit 
                unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - M_1_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 16-bit 
                unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "M_2"       (component PWM)
   - M_2_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - M_2_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - M_2_SetRatio8 -This method sets a new duty-cycle ratio. Ratio is expressed as an 8-bit unsigned integer number. 0 - FF 
                value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.   Note: Calculated duty depends on the timer capabilities and on the 
                selected period.
   - M_2_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - FFFF 
                value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.   Note: Calculated duty depends on the timer possibilities and on 
                the selected period.
   - M_2_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 16-bit 
                unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - M_2_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 16-bit 
                unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "LED_OUT"   (component PPG)
   - LED_OUT_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - LED_OUT_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - LED_OUT_SetRatio8 -This method sets a new duty-cycle ratio. The ratio is expressed as an 8-bit unsigned integer number. 
                Value 0 - 255 is proportional to ratio 0 - 100%.   Note: Calculated duty depends on the timer possibilities and 
                on the selected period.  The method is available only if method <SetPeriodMode> is not selected.
   - LED_OUT_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. Value 
                0 - 65535 value is proportional to ratio 0 - 100%.   Note: Calculated duty depends on the timer possibilities 
                and on the selected period.  The method is available only if method <SetPeriodMode> is not selected.
   - LED_OUT_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number.  The method is available only if method <SetPeriodMode> is not selected.
   - LED_OUT_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number.  The method is available only if method <SetPeriodMode> is not selected.

Module "Serial_1"  (component AsynchroSerial)
   - Serial_1_Enable -Enables the component - it starts the send and receive functions. Events may be generated 
                ("DisableEvent"/"EnableEvent").
   - Serial_1_Disable -Disables the component - it stops the send and receive functions. No events will be generated.
   - Serial_1_EnableEvent -Enables the events. This method is available if the interrupt service/event property is enabled and 
                at least one event is enabled.
   - Serial_1_DisableEvent -Disables the events. This method is available if the interrupt service/event property is enabled 
                and at least one event is enabled.
   - Serial_1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - Serial_1_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - Serial_1_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the 
                output buffer is defined and the transmitter property is enabled.
   - Serial_1_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled.
   - Serial_1_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - Serial_1_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "Serial_2"  (component AsynchroSerial)
   - Serial_2_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - Serial_2_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - Serial_2_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental 
                error), otherwise it returns an error code (it does not wait for data).  This method is available only if 
                non-zero length of the input buffer is defined and the receiver property is enabled.  If less than requested 
                number of characters is received only the available data is copied from the receive buffer to the user 
                specified destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter 
                is set to the number of received characters.
   - Serial_2_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled.
   - Serial_2_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - Serial_2_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "LED_1"     (component BitIO)
   - LED_1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - LED_1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LED_1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - LED_1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.
   - LED_1_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "ADC"       (component ADC)
   - ADC_Enable -Enables A/D converter component. <Events> may be generated (<DisableEvent>/<EnableEvent>). If possible, this 
                method switches on A/D converter device, voltage reference, etc.
   - ADC_Disable -Disables A/D converter component. No <events> will be generated. If possible, this method switches off A/D 
                converter device, voltage reference, etc.
   - ADC_EnableEvent -Enables the <events>.
   - ADC_DisableEvent -Disables the <events>.
   - ADC_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - ADC_MeasureChan -This method performs measurement on one channel. (Note: If the <number of conversions> is more than one 
                the conversion of the A/D channel is performed specified number of times.)
   - ADC_GetValue -Returns the last measured values for all channels. Format and width of the value is a native format of the 
                A/D converter.
   - ADC_GetChanValue -Returns the last measured value of the required channel. Format and width of the value is a native 
                format of the A/D converter.
   - ADC_GetChanValue8 -This method returns the last measured value of the required channel. Compared with <GetChanValue> 
                method this method returns more accurate result if the <number of conversions> is greater than 1 and <AD 
                resolution> is less than 8 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - ADC_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this method 
                returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is less than 
                16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - ADC_GetChanValue16 -This method returns the last measured value of the required channel. Compared with <GetChanValue> 
                method this method returns more accurate result if the <number of conversions> is greater than 1 and <AD 
                resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.

Module "US"        (component Capture)
   - US_Enable -This method enables the component - it starts the capture. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - US_Disable -This method disables the component - it stops the capture. No events will be generated.
   - US_Reset -This method resets the counter register (see implementation note in <General Info>).
   - US_GetCaptureValue -This method gets the last value captured by enabled timer (see implementation note in <General Info>). 
                The method does not return valid value after initialization or after <Reset> until new capture event (even if 
                the returned Error code is ERR_OK).
   - US_GetStatus -The method returns status of input capture event and resets it if new capture event has occurred.  This 
                method is available only if the <Interrupt service/event> property is disabled.
   - US_GetPinValue -The method reads the Capture pin value. The method is available only if it is possible to read the pin 
                value (usually not available for internal signals).

Module "Encoder_1_t" (component FreeCntr16)
   - Encoder_1_t_Enable -This method enables the component - the internal clocks are counted.
   - Encoder_1_t_Disable -This method disables the component - the internal clocks are not counted.
   - Encoder_1_t_Reset -This method clears the counter.
   - Encoder_1_t_GetTicks16 -This method returns the number (as a 16-bit unsigned integer) of main oscillator (Xtal) ticks 
                since the last reset.
   - Encoder_1_t_GetTimeUS -This method returns the time (as a 16-bit unsigned integer) in microseconds since the last 
                resetting after the last reset.
   - Encoder_1_t_GetTimeMS -This method returns the time (as a 16-bit unsigned integer) in milliseconds since the last 
                resetting after the last reset.
   - Encoder_1_t_GetTimeSec -This method returns the time (as a 16-bit unsigned integer) in seconds since the last resetting 
                after the last reset.
   - Encoder_1_t_GetTimeReal -This method returns the time in seconds since the last resetting as a real (floating point) 
                number. To use this method the compiler have to support floating point operations.

Module "Encoder_2_t" (component FreeCntr16)
   - Encoder_2_t_Enable -This method enables the component - the internal clocks are counted.
   - Encoder_2_t_Disable -This method disables the component - the internal clocks are not counted.
   - Encoder_2_t_Reset -This method clears the counter.
   - Encoder_2_t_GetTicks16 -This method returns the number (as a 16-bit unsigned integer) of main oscillator (Xtal) ticks 
                since the last reset.
   - Encoder_2_t_GetTimeUS -This method returns the time (as a 16-bit unsigned integer) in microseconds since the last 
                resetting after the last reset.
   - Encoder_2_t_GetTimeMS -This method returns the time (as a 16-bit unsigned integer) in milliseconds since the last 
                resetting after the last reset.
   - Encoder_2_t_GetTimeSec -This method returns the time (as a 16-bit unsigned integer) in seconds since the last resetting 
                after the last reset.
   - Encoder_2_t_GetTimeReal -This method returns the time in seconds since the last resetting as a real (floating point) 
                number. To use this method the compiler have to support floating point operations.

Module "Enconder_Int_1" (component ExtInt)
   - Enconder_Int_1_GetVal -Returns the actual value of the input pin of the component.

Module "Enconder_Int_2" (component ExtInt)
   - Enconder_Int_2_GetVal -Returns the actual value of the input pin of the component.

Module "B_1"       (component ExtInt)
   - B_1_GetVal -Returns the actual value of the input pin of the component.

Module "Bit1"      (component BitIO)
   - Bit1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Bit1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Bit1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - Bit1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.
   - Bit1_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "M1_P"      (component BitIO)
   - M1_P_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - M1_P_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - M1_P_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - M1_P_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.
   - M1_P_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "M2_P"      (component BitIO)
   - M2_P_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - M2_P_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - M2_P_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - M2_P_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.
   - M2_P_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "TI1"       (component TimerInt)
   - TI1_Enable -This method enables the component - it starts the timer. Events may be generated (<DisableEvent>/<EnableEvent>)
                .
   - TI1_Disable -This method disables the component - it stops the timer. No events will be generated.

Module "LED_OUT_1K_SQ" (component BitIO)
   - LED_OUT_1K_SQ_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - LED_OUT_1K_SQ_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LED_OUT_1K_SQ_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - LED_OUT_1K_SQ_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - LED_OUT_1K_SQ_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "ACKNOWLEDGE_LED" (component BitIO)
   - ACKNOWLEDGE_LED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - ACKNOWLEDGE_LED_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - ACKNOWLEDGE_LED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - ACKNOWLEDGE_LED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - ACKNOWLEDGE_LED_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "DISPARO_OUT" (component BitIO)
   - DISPARO_OUT_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - DISPARO_OUT_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - DISPARO_OUT_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - DISPARO_OUT_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - DISPARO_OUT_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "Cpu"       (component MC9S08QE128_80)
   - Cpu_EnableInt -Enables maskable interrupts
   - Cpu_DisableInt -Disables maskable interrupts

===================================================================================
