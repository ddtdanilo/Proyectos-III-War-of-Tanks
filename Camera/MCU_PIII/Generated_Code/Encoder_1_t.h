/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : Encoder_1_t.h
**     Project     : MCU_PIII
**     Processor   : MC9S08QE128CLK
**     Component   : FreeCntr16
**     Version     : Component 02.078, Driver 01.22, CPU db: 3.00.067
**     Compiler    : CodeWarrior HCS08 C Compiler
**     Date/Time   : 2014-10-13, 16:44, # CodeGen: 40
**     Abstract    :
**         This device "FreeCntr16" implements 16-bit Free Running Counter
**     Settings    :
**         Timer name                  : TPM3 (16-bit)
**         Counter shared              : Yes
**
**         High speed mode
**             Prescaler               : divide-by-1
**             Clock                   : 16384 Hz
**           Resolution of timer
**             Xtal ticks              : 131072
**             microseconds            : 4000000
**             milliseconds            : 4000
**             seconds                 : 4
**             seconds (real)          : 4.0
**
**         Initialization:
**              Timer                  : Enabled
**
**         Timer registers
**              Counter                : TPM3CNT   [$0061]
**              Mode                   : TPM3SC    [$0060]
**              Run                    : TPM3SC    [$0060]
**              Prescaler              : TPM3SC    [$0060]
**
**         Compare registers
**     Contents    :
**         Enable      - byte Encoder_1_t_Enable(void);
**         Disable     - byte Encoder_1_t_Disable(void);
**         Reset       - byte Encoder_1_t_Reset(void);
**         GetTicks16  - byte Encoder_1_t_GetTicks16(word *Ticks);
**         GetTimeUS   - byte Encoder_1_t_GetTimeUS(word *Time);
**         GetTimeMS   - byte Encoder_1_t_GetTimeMS(word *Time);
**         GetTimeSec  - byte Encoder_1_t_GetTimeSec(word *Time);
**         GetTimeReal - byte Encoder_1_t_GetTimeReal(float *Time);
**
**     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file Encoder_1_t.h
** @version 01.22
** @brief
**         This device "FreeCntr16" implements 16-bit Free Running Counter
*/         
/*!
**  @addtogroup Encoder_1_t_module Encoder_1_t module documentation
**  @{
*/         

#ifndef __Encoder_1_t
#define __Encoder_1_t

/* MODULE Encoder_1_t. */

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#include "PE_Timer.h"
#include "Cpu.h"

byte Encoder_1_t_Enable(void);
/*
** ===================================================================
**     Method      :  Encoder_1_t_Enable (component FreeCntr16)
*/
/*!
**     @brief
**         This method enables the component - the internal clocks are
**         counted.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
*/
/* ===================================================================*/

byte Encoder_1_t_Disable(void);
/*
** ===================================================================
**     Method      :  Encoder_1_t_Disable (component FreeCntr16)
*/
/*!
**     @brief
**         This method disables the component - the internal clocks are
**         not counted.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
*/
/* ===================================================================*/

byte Encoder_1_t_Reset(void);
/*
** ===================================================================
**     Method      :  Encoder_1_t_Reset (component FreeCntr16)
*/
/*!
**     @brief
**         This method clears the counter.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
*/
/* ===================================================================*/

byte Encoder_1_t_GetTicks16(word *Ticks);
/*
** ===================================================================
**     Method      :  Encoder_1_t_GetTicks16 (component FreeCntr16)
**     Description :
**         Returns the number (as a 16-bit unsigned integer) of main
**         oscillator ticks since the last reset (usually External osc.,
**         internal osc. if exits and external osc. is disabled).
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Ticks           - A pointer to the returned 16-bit value
**                           in main oscillator ticks
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_OVERFLOW - Software counter overflow\
**                           ERR_MATH - Overflow during evaluation
** ===================================================================
*/

byte Encoder_1_t_GetTimeUS(word *Time);
/*
** ===================================================================
**     Method      :  Encoder_1_t_GetTimeUS (component FreeCntr16)
**     Description :
**         Returns the time (as a 16-bit unsigned integer) in microseconds
**         since the last resetting after the last reset.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Time            - A pointer to the returned 16-bit value
**                           in microseconds
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_OVERFLOW - Software counter overflow
**                           ERR_MATH - Overflow during evaluation
** ===================================================================
*/

byte Encoder_1_t_GetTimeMS(word *Time);
/*
** ===================================================================
**     Method      :  Encoder_1_t_GetTimeMS (component FreeCntr16)
**     Description :
**         Returns the time (as a 16-bit unsigned integer) in milliseconds
**         since the last resetting after the last reset.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Time            - A pointer to the returned 16-bit value
**                           in milliseconds
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_OVERFLOW - Software counter overflow
**                           ERR_MATH - Overflow during evaluation
** ===================================================================
*/

byte Encoder_1_t_GetTimeSec(word *Time);
/*
** ===================================================================
**     Method      :  Encoder_1_t_GetTimeSec (component FreeCntr16)
**     Description :
**         Returns the time (as a 16-bit unsigned integer) in seconds
**         since the last resetting after the last reset.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Time            - A pointer to the returned 16-bit value
**                           in seconds
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_OVERFLOW - Software counter overflow
**                           ERR_MATH - Overflow during evaluation
** ===================================================================
*/

byte Encoder_1_t_GetTimeReal(TPE_Float *Time);
/*
** ===================================================================
**     Method      :  Encoder_1_t_GetTimeReal (component FreeCntr16)
**     Description :
**         Returns the time in seconds since the last resetting
**         as a real (floating point) number.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Time            - A pointer to the returned floating
**                           point value in seconds
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_OVERFLOW - Software counter overflow
**                           ERR_MATH - Overflow during evaluation
** ===================================================================
*/

void Encoder_1_t_Init(void);
/*
** ===================================================================
**     Method      :  Encoder_1_t_Init (component FreeCntr16)
**
**     Description :
**         Initializes the associated peripheral(s) and the component 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

__interrupt void Encoder_1_t_Interrupt(void);
/*
** ===================================================================
**     Method      :  Encoder_1_t_Interrupt (component FreeCntr16)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes the component event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


/* END Encoder_1_t. */

#endif /* ifndef __Encoder_1_t */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale HCS08 series of microcontrollers.
**
** ###################################################################
*/
